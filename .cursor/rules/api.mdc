---
description: API
alwaysApply: false
---

# 📚 图床项目 API 文档

本文档描述 **图床后端服务** 的 RESTful API，负责图片上传、存储、标签管理、搜索等核心功能。

## 图床后端服务 API

### A. 图片管理 (Image Management)

#### 1\. 上传图片

| 方法 | 路径 | 描述 |
| :--- | :--- | :--- |
| `POST` | `/images/upload` | 上传图片文件，可选添加描述，返回图片 URL。 |

| 参数 | 位置 | 类型 | 描述 | 必填 |
| :--- | :--- | :--- | :--- | :--- |
| `file` | Body (FormData) | File | 要上传的图片文件。 | 是 |
| `description` | Body (FormData) | String | 图片描述信息。 | 否 |

**成功响应 (201 Created):**

```json
{
  "code": 201,
  "message": "Upload successful",
  "data": {
    "image_id": "img_a1b2c3d4",
    "url": "https://cdn.your-imagehost.com/a1b2c3d4.jpg",
    "hash": "e6884675b87...",
    "description": "美丽的风景照片"
  }
}
```

#### 2\. 批量上传图片

| 方法 | 路径 | 描述 |
| :--- | :--- | :--- |
| `POST` | `/images/batch-upload` | 批量上传多个图片文件，返回每个文件的上传结果。 |

| 参数 | 位置 | 类型 | 描述 | 必填 |
| :--- | :--- | :--- | :--- | :--- |
| `files` | Body (FormData) | File[] | 要上传的图片文件数组。 | 是 |

**说明**：
- 批量上传不支持添加 tag 和 description，这些信息可以在上传后通过其他接口修改
- 每个文件独立处理，部分失败不影响其他文件
- 建议单次批量上传不超过 20 个文件

**成功响应 (200 OK):**

```json
{
  "code": 200,
  "message": "Batch upload completed",
  "data": {
    "total": 5,
    "success": 4,
    "failed": 1,
    "results": [
      {
        "filename": "photo1.jpg",
        "status": "success",
        "image_id": "img_a1b2c3d4",
        "url": "https://cdn.your-imagehost.com/a1b2c3d4.jpg",
        "hash": "e6884675b87..."
      },
      {
        "filename": "photo2.jpg",
        "status": "success",
        "image_id": "img_b2c3d4e5",
        "url": "https://cdn.your-imagehost.com/b2c3d4e5.jpg",
        "hash": "f7995786c98..."
      },
      {
        "filename": "invalid.txt",
        "status": "failed",
        "error": "Invalid file type"
      }
    ]
  }
}
```

#### 3\. 列出所有图片

| 方法 | 路径 | 描述 |
| :--- | :--- | :--- |
| `GET` | `/images` | 获取所有图片列表，支持分页。 |

| 参数 | 位置 | 类型 | 描述 | 必填 |
| :--- | :--- | :--- | :--- | :--- |
| `page` | Query | Integer | 页码（从 1 开始）。 | 否 (默认 1) |
| `limit` | Query | Integer | 每页数量。 | 否 (默认 20) |
| `sort` | Query | String | 排序方式：`date_desc` (最新优先) 或 `date_asc` (最旧优先)。 | 否 (默认 date_desc) |

**成功响应 (200 OK):**

```json
{
  "code": 200,
  "message": "Success",
  "data": {
    "total": 150,
    "current_page": 1,
    "images": [
      {
        "id": "img_a1b2c3d4",
        "url": "https://cdn.your-imagehost.com/a1b2c3d4.jpg",
        "description": "美丽的风景照片",
        "upload_date": "2025-10-26T12:00:00Z",
        "tags": ["风景", "自然"]
      }
    ]
  }
}
```

#### 4\. 获取图片详情

| 方法 | 路径 | 描述 |
| :--- | :--- | :--- |
| `GET` | `/images/{image_id}` | 获取单张图片的完整信息，包括 URL、描述、标签等元数据。 |

**成功响应 (200 OK):**

```json
{
  "code": 200,
  "message": "Success",
  "data": {
    "image_id": "img_a1b2c3d4",
    "url": "https://cdn.your-imagehost.com/a1b2c3d4.jpg",
    "hash": "e6884675b87...",
    "description": "美丽的风景照片",
    "upload_date": "2025-10-26T12:00:00Z",
    "tags": ["风景", "自然"]
  }
}
```

#### 5\. 更新图片描述

| 方法 | 路径 | 描述 |
| :--- | :--- | :--- |
| `PUT` | `/images/{image_id}` | 更新图片的描述信息。 |

| 参数 | 位置 | 类型 | 描述 | 必填 |
| :--- | :--- | :--- | :--- | :--- |
| `description` | Body | String | 新的图片描述。 | 是 |

**成功响应 (200 OK):**

```json
{
  "code": 200,
  "message": "Description updated successfully"
}
```

#### 6\. 删除图片

| 方法 | 路径 | 描述 |
| :--- | :--- | :--- |
| `DELETE` | `/images/{image_id}` | 根据 ID 删除图片（软删除）。 |

**成功响应 (200 OK):**

```json
{
  "code": 200,
  "message": "Image deleted successfully"
}
```

---

#### 7\. 批量删除图片

| 方法 | 路径 | 描述 |
| :--- | :--- | :--- |
| `POST` | `/images/batch-delete` | 批量删除多张图片（软删除）。 |

| 参数 | 位置 | 类型 | 描述 | 必填 |
| :--- | :--- | :--- | :--- | :--- |
| `image_ids` | Body | String Array | 要删除的图片 ID 列表。 | 是 |

**请求示例**

```json
{
  "image_ids": ["img_a1b2c3d4", "img_b2c3d4e5", "img_c3d4e5f6"]
}
```

**成功响应 (200 OK):**

```json
{
  "code": 200,
  "message": "Batch delete completed",
  "data": {
    "total": 3,
    "success": 2,
    "failed": 1,
    "results": [
      {
        "image_id": "img_a1b2c3d4",
        "status": "success"
      },
      {
        "image_id": "img_b2c3d4e5",
        "status": "success"
      },
      {
        "image_id": "img_c3d4e5f6",
        "status": "failed",
        "error": "Image not found"
      }
    ]
  }
}
```

---

### B. 标签管理与查询 (Tag Management & Query)

#### 8\. 给图片打标签

| 方法 | 路径 | 描述 |
| :--- | :--- | :--- |
| `PUT` | `/images/{image_id}/tags` | 更新图片的标签。 |

| 参数 | 位置 | 类型 | 描述 | 必填 |
| :--- | :--- | :--- | :--- | :--- |
| `tags` | Body | String Array | 新的标签列表。 | 是 |
| `mode` | Body | String | **'set'** (替换所有标签) 或 **'append'** (追加新标签)。 | 否 (默认'set') |

#### 9\. AI 生成图片描述和标签

| 方法 | 路径 | 描述 |
| :--- | :--- | :--- |
| `POST` | `/images/{image_id}/tags/generate` | 使用多模态大语言模型自动为图片生成描述和标签。 |

| 参数 | 位置 | 类型 | 描述 | 必填 |
| :--- | :--- | :--- | :--- | :--- |
| `image_id` | Path | String | 图片 ID。 | 是 |
| `prompt` | Body | String | 提示词，引导 LLM 生成描述和标签（可在提示词中控制数量、语言、风格等）。 | 否 |

**说明**：
- 调用多模态大语言模型（如 Doubao Seed）分析图片内容
- 根据图片内容和提示词自动生成描述和标签
- `prompt` 为空时使用默认提示词
- LLM 返回 JSON 格式结果：`{"description": "...", "tags": ["tag1", "tag2", ...]}`
- 前端可以选择性地使用或修改返回的描述和标签
- 后端不自动保存，由前端决定是否应用
- **前端行为**：描述会**直接覆盖**现有描述，标签会**追加**到现有标签列表

**默认提示词**：
```
请分析这张图片，为它生成一个简洁的描述（20-50字）和 5-10 个描述性标签。
标签应准确、简洁，涵盖：主题、场景、风格、色彩、情感等方面。
```

**请求示例 1（使用默认提示词）**：
```json
{
  "prompt": ""
}
```

**请求示例 2（自定义中文风格）**：
```json
{
  "prompt": "请用诗意的语言描述这张图片（30字以内），并生成 8 个文艺风格的中文标签"
}
```

**请求示例 3（生成英文内容）**：
```json
{
  "prompt": "Generate a concise English description (20-40 words) and 10 English tags for this image. Focus on subject, style, colors, and mood."
}
```

**请求示例 4（专业摄影风格）**：
```json
{
  "prompt": "用专业摄影术语描述这张照片（30字），并生成 6 个摄影技术相关的标签（如构图、光线、景深等）"
}
```

**成功响应 (200 OK):**

```json
{
  "code": 200,
  "message": "Image info generated successfully",
  "data": {
    "generated_description": "日落时分的群山剪影，橙红色的天空映衬着连绵起伏的山脉，营造出宁静而壮美的自然景观。",
    "generated_tags": ["风景", "山川", "日落", "自然", "宁静", "橙色", "户外", "剪影"]
  }
}
```

**响应字段说明**：
- `generated_description`: AI 生成的图片描述
- `generated_tags`: AI 生成的标签列表

**错误响应示例**：

```json
{
  "code": 503,
  "message": "LLM service error: failed to parse JSON response"
}
```

**使用场景**：
1. **快速标注**：使用默认提示词一键生成中文描述和标签
2. **定制化风格**：自定义 prompt 生成特定风格的内容
3. **多语言支持**：在 prompt 中指定语言（中文、英文、日文等）
4. **专业领域**：通过 prompt 引导生成专业领域的内容（摄影、艺术、技术等）
5. **批量处理**：前端可以批量调用此接口为多张图片生成信息
6. **重新生成描述**：多次调用会覆盖之前的描述，标签会累积

---

#### 10\. 列出所有标签

| 方法 | 路径 | 描述 |
| :--- | :--- | :--- |
| `GET` | `/tags` | 获取所有已用标签列表。 **(分页必须)** |

| 参数 | 位置 | 类型 | 描述 | 必填 |
| :--- | :--- | :--- | :--- | :--- |
| `page` | Query | Integer | 页码 (从 1 开始)。 | 否 (默认 1) |
| `limit` | Query | Integer | 每页数量。 | 否 (默认 50) |

**成功响应:**

```json
{
  "code": 200,
  "message": "Success",
  "data": {
    "total": 1250,
    "current_page": 1,
    "tags": [
      {"name": "风景", "count": 520}, 
      {"name": "猫咪", "count": 480}, 
      {"name": "艺术", "count": 300}
    ]
  }
}
```

#### 11\. 精确搜索（AND 逻辑）

| 方法 | 路径 | 描述 |
| :--- | :--- | :--- |
| `GET` | `/search/exact` | 严格 AND 搜索，只返回同时包含所有指定标签的图片。 |

| 参数 | 位置 | 类型 | 描述 | 必填 |
| :--- | :--- | :--- | :--- | :--- |
| `tags` | Query | String Array | 必须包含的标签列表 (e.g., `tags=cat,cute`)。 | 是 |
| `page`, `limit` | Query | Integer | 分页参数。 | 否 |

**成功响应:**

```json
{
  "code": 200,
  "message": "Success",
  "data": {
    "total": 150,
    "current_page": 1,
    "results": [
      {
        "id": "img_x1y2z3a4",
        "url": "https://cdn.your-imagehost.com/x1y2z3a4.jpg",
        "description": "美丽的山川风景",
        "tags": ["风景", "自然", "山川"]
      }
    ]
  }
}
```

#### 12\. 相关性搜索（OR 逻辑）

| 方法 | 路径 | 描述 |
| :--- | :--- | :--- |
| `GET` | `/search/relevance` | OR 逻辑搜索，返回包含任一标签的图片，按匹配标签数降序排列。 |

| 参数 | 位置 | 类型 | 描述 | 必填 |
| :--- | :--- | :--- | :--- | :--- |
| `tags` | Query | String Array | 标签列表 (e.g., `tags=cat,cute`)。 | 是 |
| `page`, `limit` | Query | Integer | 分页参数。 | 否 |

**成功响应:**

```json
{
  "code": 200,
  "message": "Success",
  "data": {
    "total": 520,
    "current_page": 1,
    "results": [
      {
        "id": "img_x1y2z3a4",
        "url": "https://cdn.your-imagehost.com/x1y2z3a4.jpg",
        "description": "可爱的猫咪",
        "matched_tag_count": 3,
        "tags": ["cat", "cute", "pet"]
      },
      {
        "id": "img_b5c6d7e8",
        "url": "https://cdn.your-imagehost.com/b5c6d7e8.jpg",
        "description": "动物照片",
        "matched_tag_count": 2,
        "tags": ["cat", "animal"]
      }
    ]
  }
}
```
